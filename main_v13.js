// main_v13.js ‚Äî L√≥gica completa do chat APS-Vida (Frontend Integrado)
// üü¢ CORRE√á√ïES: Sintaxe, escopo, Relat√≥rio, prompt, proxy local, salvamento Firestore.

/* ================= PROTE√á√ÉO DE EXECU√á√ÉO √öNICA ================= */
if (window.APS_CHAT_INITIALIZED) {
    console.warn("‚ö†Ô∏è Script j√° inicializado, ignorando segunda execu√ß√£o.");
} else {
    window.APS_CHAT_INITIALIZED = true;
    console.log("üöÄ main_v13.js carregado com sucesso! (Apontando para 127.0.0.1)");
}

/* ================= IMPORTS FIREBASE ================= */
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, collection, addDoc, doc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

/* ================= VARI√ÅVEIS GLOBAIS ================= */
const PROXY_ENDPOINT = "http://127.0.0.1:5001/apssaude-cbbb7/us-central1/openaiProxy";
let app, auth, db;
let messages = [];
let userData = {};
let authReady = false;
let isChatStarted = false; // Controla se a conversa inicial foi feita.

/* ================= FIRESTORE: SALVAR RELAT√ìRIO ================= */
async function salvarRelatorio(userData, resumoFinal) {
    try {
        console.log("ü©∫ Salvando relat√≥rio no Firestore...");
        const chatHistory = messages.map(m => ({ role: m.role, text: m.text }));

        const relatorio = {
            ...userData,
            resumo: resumoFinal,
            chatHistory,
            status: "PENDENTE",
            data: new Date().toISOString()
        };

        addDoc(collection(db, "relatorios"), relatorio)
            .then((relatorioRef) => {
                console.log("‚úÖ Relat√≥rio salvo com ID:", relatorioRef.id);

                // üß† Salva hist√≥rico e dados localmente para o diagn√≥stico
                localStorage.setItem("aps_chat_messages", JSON.stringify(messages));
                localStorage.setItem("aps_user_data", JSON.stringify(userData));

                // Redireciona para o relat√≥rio
                window.location.href = `/relatorio.html?id=${relatorioRef.id}`;
            })

            .catch((error) => {
                console.error("‚ùå Erro ao salvar relat√≥rio:", error);
                saveLocalMessage("Erro ao gerar relat√≥rio. Tente novamente.", "assistant");
            });
    } catch (error) {
        console.error("‚ùå Erro inesperado ao salvar relat√≥rio:", error);
        saveLocalMessage("Erro ao gerar relat√≥rio. Tente novamente.", "assistant");
    }
}


/* ================= OBT√âM PROMPT DE OURO ================= */
async function getGoldPrompt() {
    const MAX_RETRIES = 5;
    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {
        try {
            await new Promise(r => setTimeout(r, Math.pow(2, attempt - 1) * 100));
            const docRefSystem = doc(db, "config", "system_config");
            const snap = await getDoc(docRefSystem);
            if (snap.exists() && snap.data().systemPrompt) return snap.data().systemPrompt;
        } catch (e) {
            console.warn(`‚ö†Ô∏è Falha na tentativa ${attempt} de leitura do Prompt`, e);
        }
    }
    console.error("‚ùå Fallback do Prompt acionado.");
    return `
Voc√™ √© um assistente virtual de sa√∫de respons√°vel por uma triagem humanizada.
Siga estas regras ESTRITAMENTE:
1Ô∏è‚É£ Fa√ßa no m√°ximo 6 perguntas para entender os sintomas principais.
2Ô∏è‚É£ Ap√≥s obter informa√ß√µes suficientes, finalize a conversa com uma mensagem de encerramento e inclua o comando [RELATORIO] no final.
3Ô∏è‚É£ N√ÉO continue fazendo perguntas ap√≥s incluir [RELATORIO].
4Ô∏è‚É£ O [RELATORIO] deve conter um resumo do caso em linguagem clara e sugest√µes gerais (sem diagn√≥stico definitivo).
5Ô∏è‚É£ Sempre mantenha um tom acolhedor, emp√°tico e profissional.
6Ô∏è‚É£ Se o usu√°rio digitar /relatorio, encerre imediatamente e gere o relat√≥rio com [RELATORIO].
`;
}

/* ================= DOMCONTENTLOADED ================= */
document.addEventListener("DOMContentLoaded", async () => {
    // üåü OBTER ELEMENTOS APENAS UMA VEZ NO ESCOPO üåü
    const preTriageContainer = document.getElementById("pre-triage-container");
    const preTriageForm = document.getElementById("pre-triage-form");
    const chatInterfaceContainer = document.getElementById("chat-interface-container");
    const chatForm = document.getElementById("chat-form");
    const userInput = document.getElementById("user-input");
    const sendButton = document.getElementById("send-button");
    const messagesArea = document.getElementById("messages-area");
    const loadingIndicator = document.getElementById("loading-indicator");

    // üåü CORRE√á√ÉO 1: ISOLA A MANIPULA√á√ÉO DO LAYOUT üåü
    // S√≥ manipula as classes se os cont√™ineres existirem (ou seja, se estiver no index.html)
    if (preTriageContainer && chatInterfaceContainer) {
        preTriageContainer.classList.remove("hidden");
        chatInterfaceContainer.classList.add("hidden");
    }


    const firebaseConfig = {
        apiKey: "REMOVIDO_POR_SEGURANCASyCUOoyDI8GJA7WzDV0AQq2PJKNd6XupGxA",
        authDomain: "apssaude-cbbb7.firebaseapp.com",
        projectId: "apssaude-cbbb7",
        storageBucket: "apssaude-cbbb7.firebasestorage.app",
        messagingSenderId: "657282519105",
        appId: "1:657282519105:web:286898c3980cecdecf36c0",
        measurementId: "G-W95JN8MTB4",
    };

    app = initializeApp(firebaseConfig);
    auth = getAuth(app);
    db = getFirestore(app);

    try {
        await signInAnonymously(auth);
        authReady = true;
        console.log("‚úÖ Firebase inicializado e usu√°rio an√¥nimo autenticado.");
    } catch (error) {
        console.error("‚ùå ERRO DE AUTENTICA√á√ÉO:", error);
    }

    /* ================= FUN√á√ïES AUXILIARES ================= */
    function sanitize(str) {
        return String(str || "")
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/\n/g, "<br>");
    }

    function renderMessage(text, role = "assistant", isNew = true) {
        const wrapper = document.createElement("div");
        wrapper.className = `mb-3 flex ${role === "user" ? "justify-end" : "justify-start"}`;
        const bubble = document.createElement("div");
        bubble.className =
            role === "user"
                ? "bg-blue-500 text-white rounded-lg px-4 py-2 inline-block max-w-[80%]"
                : "bg-gray-200 text-gray-800 rounded-lg px-4 py-2 inline-block max-w-[80%]";
        const content = document.createElement("div");
        content.className = "markdown-output";
        content.innerHTML = sanitize(text);
        bubble.appendChild(content);
        wrapper.appendChild(bubble);
        messagesArea.appendChild(wrapper);
        if (isNew) messagesArea.scrollTop = messagesArea.scrollHeight;
    }

    function displayFormError(msg) {
        const el = document.getElementById("form-error-message");
        if (el) {
            el.textContent = msg;
            el.classList.remove("hidden");
            setTimeout(() => el.classList.add("hidden"), 5000);
        } else console.error("ERRO DE VALIDA√á√ÉO (Display n√£o encontrado):", msg);
    }

    function setLoading(isLoading) {
        loadingIndicator.classList.toggle("hidden", !isLoading);
        userInput.disabled = isLoading;
        sendButton.disabled = isLoading || (userInput && userInput.value.trim() === "");
    }

    function saveLocalMessage(text, role = "assistant", isTriageQuestion = false) {
        messages.push({ role, text, isTriageQuestion });
        renderMessage(text, role, true);
    }

    /* ================= ENVIO AO PROXY ================= */
    // =======================================================
    // üîß Fun√ß√£o corrigida ‚Äî IA pergunta uma por vez
    // =======================================================
    async function generateContent(chatHistory, systemPrompt) {
        // Formata o hist√≥rico no formato aceito pelo proxy
        const formattedHistory = chatHistory.map(m => ({
            role: m.role.toLowerCase(),
            content: m.text,


        }));

        // üß† Refor√ßo de instru√ß√£o ‚Äî impede m√∫ltiplas perguntas e diagn√≥sticos prematuros
        const enhancedPrompt = systemPrompt + `
INSTRU√á√ïES ADICIONAIS:
- Fa√ßa APENAS UMA pergunta por vez.
- Espere a resposta do usu√°rio antes de continuar.
- N√ÉO forne√ßa recomenda√ß√µes ou diagn√≥sticos at√© que o relat√≥rio seja finalizado com [RELATORIO].
- Quando considerar a triagem conclu√≠da, finalize com um resumo e a tag [RELATORIO].
`;

        // ‚úÖ Corrigido: o prompt enviado agora √© o "enhancedPrompt"
        const payload = {
            model: "gpt-4o-mini",
            systemPrompt: enhancedPrompt,
            history: formattedHistory
        };

        setLoading(true);
        try {
            console.log("‚û°Ô∏è Enviando ao proxy:", payload);

            const resp = await fetch(PROXY_ENDPOINT, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)

            });

            const json = await resp.json();

            if (!resp.ok) {
                throw new Error(json.error || `Erro HTTP ${resp.status}`);
            }

            // ‚úÖ Corrigido: resposta padronizada
            return json.response || json.output || "";
        } catch (err) {
            console.error("‚ùå Falha na chamada da IA:", err);
            saveLocalMessage("Erro ao se comunicar com o servidor de IA. Tente novamente.", "assistant");
            throw err;
        } finally {
            setLoading(false);
        }
    }

    /* ================= EVENTOS ================= */
    // üåü BLOCO CONDICIONAL (garante que s√≥ roda no index.html) üåü
    if (preTriageForm && chatForm && userInput && sendButton) {



        // üåü CORRE√á√ÉO 2.1: TORNA O EVENTO ASYNC E FOR√áA A CHAMADA DA IA, COM CHECAGEM DE NULL üåü
        preTriageForm.addEventListener("submit", async (e) => { // Tornou-se ASYNC!
            e.preventDefault();
            const name = document.getElementById("user-name").value.trim();
            const cpf = document.getElementById("user-cpf").value.trim().replace(/\D/g, "");
            const phone = document.getElementById("user-phone").value.trim();
            const email = document.getElementById("user-email").value.trim();

            if (!name || !cpf || !phone || !email)
                return displayFormError("Por favor, preencha todos os campos obrigat√≥rios.");
            if (cpf.length !== 11) return displayFormError("O CPF deve conter 11 d√≠gitos.");
            if (!/\S+@\S+\.\S+/.test(email)) return displayFormError("O e-mail fornecido n√£o √© v√°lido.");

            userData = { name, cpf, phone, email };

            // A√ß√£o de Transi√ß√£o (AGORA COM CHECAGEM DE NULL)
            if (preTriageContainer) preTriageContainer.classList.add("hidden"); // Checa antes de usar!
            if (chatInterfaceContainer) chatInterfaceContainer.classList.remove("hidden"); // Checa antes de usar!

            userInput.focus();

            // L√≥gica de apresenta√ß√£o inicial (AGORA CHAMA A IA!)
            if (!isChatStarted) {
                if (!authReady) {
                    saveLocalMessage("‚ö†Ô∏è Sistema de triagem n√£o autenticado. Tente recarregar.", "assistant");
                    return;
                }

                const initialUserMessage = `O usu√°rio ${name} (dados validados) iniciou a triagem. Por favor, comece a conversa com a primeira pergunta de acordo com o Prompt de Ouro.`;

                // Coloca a mensagem inicial do usu√°rio no hist√≥rico para a IA ver
                messages.push({ role: 'user', text: initialUserMessage });

                try {
                    const persona = await getGoldPrompt();
                    const aiText = await generateContent(messages, persona);

                    // Renderiza a primeira resposta (sauda√ß√£o + pergunta 1)
                    saveLocalMessage(aiText, "assistant");

                } catch (error) {
                    saveLocalMessage("‚ùå Erro ao iniciar a triagem. Verifique a conex√£o com o servidor de IA.", "assistant");
                }

                // Remove a mensagem inicial do hist√≥rico do usu√°rio para n√£o poluir o hist√≥rico
                messages.shift();

                isChatStarted = true;
            }
        });

        chatForm.addEventListener("submit", async (e) => {
            e.preventDefault();
            const text = userInput.value.trim();
            if (!text) return;
            saveLocalMessage(text, "user");
            userInput.value = "";
            sendButton.disabled = true;

            if (!authReady) {
                saveLocalMessage("‚ö†Ô∏è Sistema de triagem n√£o autenticado.", "assistant");
                return;
            }

            let aiText = "";
            try {
                const persona = await getGoldPrompt();
                aiText = await generateContent(messages, persona);
            } catch (error) {
                saveLocalMessage(`‚ùå Erro: n√£o foi poss√≠vel obter resposta. ${error.message}`, "assistant");
                return;
            }

            // üü¢ L√≥gica de Finaliza√ß√£o do Chat (com o token [RELATORIO])
            // ü©∫ Detecta o final da triagem
            if (/\[relatorio\]|\[relat√≥rio\]/i.test(aiText)) {
                console.log("üîç Detec√ß√£o de [RELATORIO] confirmada ‚Äî finalizando triagem.");

                // üîπ Remove o marcador [RELATORIO] para n√£o aparecer ao usu√°rio
                const finalSummary = aiText.replace(/\[relatorio\]|\[relat√≥rio\]/gi, "").trim();

                // üîπ Mostra apenas o texto limpo na tela
                if (finalSummary) saveLocalMessage(finalSummary, "assistant", true);

                // üîπ Mensagem adicional amig√°vel
                saveLocalMessage("Triagem conclu√≠da! Gerando o relat√≥rio final...", "assistant", false);

                // üîπ Salva o relat√≥rio e redireciona
                await salvarRelatorio(userData, finalSummary);

                // Impede execu√ß√£o extra
                return;
            }


            // Se n√£o for [RELATORIO], a mensagem √© salva normalmente.
            saveLocalMessage(aiText, "assistant");

            sendButton.disabled = false; // Reabilita ap√≥s a resposta da IA
            userInput.focus(); // Coloca o foco de volta
        });

        userInput.addEventListener("input", () => {
            sendButton.disabled = userInput.value.trim() === "";
        });
    }

    // FIM DO BLOCO CONDICIONAL (if)

    // =========================================================
    // üîÅ MODO DE RETORNO P√ìS-PAGAMENTO (Diagn√≥stico Final)
    // =========================================================
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const returnMode = urlParams.get("return");

        if (returnMode === "diagnostico") {
            console.log("ü©∫ Retorno de pagamento detectado ‚Äî iniciando modo diagn√≥stico.");

            // üîÅ Recupera o hist√≥rico salvo antes do pagamento
            const storedMessages = JSON.parse(localStorage.getItem("aps_chat_messages") || "[]");
            const storedUser = JSON.parse(localStorage.getItem("aps_user_data") || "{}");
            if (storedMessages.length > 0) {
                messages = storedMessages;
                console.log("üíæ Hist√≥rico restaurado:", messages.length, "mensagens.");
            }
            if (storedUser.name) {
                userData = storedUser;
            }

            // Esconde pr√©-triagem e mostra chat
            if (preTriageContainer) preTriageContainer.classList.add("hidden");
            if (chatInterfaceContainer) chatInterfaceContainer.classList.remove("hidden");

            // Mensagem inicial do diagn√≥stico
            saveLocalMessage(`
‚úÖ Pagamento confirmado!
Ol√° ${userData.name || "paciente"}, vamos analisar sua triagem e gerar um parecer personalizado.
`, "assistant");

            // Obter prompt e gerar diagn√≥stico
            const persona = await getGoldPrompt();
            const enhancedPrompt = persona + `
INSTRU√á√ïES ADICIONAIS PARA DIAGN√ìSTICO:
- Analise TODO o hist√≥rico da triagem anterior.
- Gere um parecer t√©cnico resumido e emp√°tico.
- N√ÉO repita perguntas da triagem.
- N√ÉO solicite dados novamente.
- Finalize com recomenda√ß√µes gerais e incentivo para avalia√ß√£o m√©dica presencial, se necess√°rio.
`;

            const aiResponse = await generateContent(messages, enhancedPrompt);
            saveLocalMessage(aiResponse, "assistant");
        }
    } catch (err) {
        console.error("‚ùå Erro ao carregar diagn√≥stico:", err);
        saveLocalMessage("Erro ao gerar diagn√≥stico. Tente novamente mais tarde.", "assistant");
    }
    /* ===========================================================
       üîÅ RETORNO P√ìS-PAGAMENTO ‚Äî GERA√á√ÉO DE DIAGN√ìSTICO FINAL
       =========================================================== */
    try {
        const urlParams = new URLSearchParams(window.location.search);
        const returnMode = urlParams.get("return");
        const relatorioId = urlParams.get("id");

        if (returnMode === "diagnostico" && relatorioId) {
            console.log("ü©∫ Retorno de pagamento detectado ‚Äî gerando diagn√≥stico final.");

            // UI: ocultar pr√©-triagem e mostrar chat
            if (preTriageContainer) preTriageContainer.classList.add("hidden");
            if (chatInterfaceContainer) chatInterfaceContainer.classList.remove("hidden");

            saveLocalMessage("‚úÖ Pagamento confirmado! Preparando diagn√≥stico aprofundado com base na sua triagem...", "assistant");

            // 1Ô∏è‚É£ Busca o relat√≥rio salvo
            const relatorioRef = doc(db, "relatorios", relatorioId);
            const snap = await getDoc(relatorioRef);

            if (!snap.exists()) {
                saveLocalMessage("‚ùå Relat√≥rio n√£o encontrado. Tente novamente.", "assistant");
                return;
            }

            const relatorio = snap.data();
            const resumo = relatorio.resumo || "Sem resumo registrado.";
            const historico = relatorio.chatHistory || [];

            // 2Ô∏è‚É£ Monta o prompt de diagn√≥stico aprofundado
            const diagnosticoPrompt = `
Voc√™ √© um assistente virtual de sa√∫de (APS-Vida) respons√°vel por elaborar diagn√≥sticos e orienta√ß√µes personalizadas.

Contexto da Triagem:
${historico.map(m => `${m.role === 'user' ? 'Paciente' : 'Assistente'}: ${m.text}`).join('\n')}

Resumo Cl√≠nico:
${resumo}

Tarefa:
Elabore um parecer detalhado com base nas informa√ß√µes da triagem. 
Sua resposta deve conter:
1. Um resumo cl√≠nico reescrito de forma m√©dica e compreensiva.
2. Uma an√°lise das poss√≠veis causas prov√°veis (sem diagn√≥stico fechado).
3. Orienta√ß√µes pr√°ticas e educativas.
4. Um lembrete final para procurar atendimento m√©dico presencial.

Responda de forma humanizada, clara e profissional. 
`;

            // 3Ô∏è‚É£ Chama a IA para gerar o diagn√≥stico final
            const respostaIA = await generateContent(
                [{ role: "user", text: "Gerar diagn√≥stico final com base no relat√≥rio acima." }],
                diagnosticoPrompt
            );

            // 4Ô∏è‚É£ Salva o diagn√≥stico no Firestore
            await setDoc(
                doc(db, "relatorios", relatorioId),
                {
                    status: "FINALIZADO",
                    diagnosticoFinal: respostaIA,
                    atualizadoEm: new Date().toISOString()
                },
                { merge: true }
            );

            // 5Ô∏è‚É£ Exibe no chat
            saveLocalMessage("ü©∫ Diagn√≥stico final gerado com sucesso!", "assistant");
            saveLocalMessage(respostaIA, "assistant");

            console.log("‚úÖ Diagn√≥stico salvo e exibido.");
        }
    } catch (err) {
        console.error("‚ùå Erro ao gerar diagn√≥stico final:", err);
        saveLocalMessage("Erro ao gerar diagn√≥stico. Tente novamente mais tarde.", "assistant");
    }

});
// --- Fun√ß√£o auxiliar: valida se o e-mail √© VIP ---
function isVipUser(email) {
    const vipList = [
        "atendimento@apsvida.com",
        "rodrigotogomed@gmail.com"
    ];
    return vipList.includes(email.toLowerCase());
}

// --- Fun√ß√£o: obt√©m o Prompt de Ouro do Firestore ---
async function getGoldPrompt(userEmail) {
    if (!isVipUser(userEmail)) {
        console.warn("Acesso negado: usu√°rio n√£o √© VIP.");
        return null;
    }

    try {
        // ‚úÖ Ajustado para usar config / system_config
        const docRef = firebase.firestore().collection("config").doc("system_config");
        const docSnap = await docRef.get();

        if (docSnap.exists) {
            const data = docSnap.data();
            if (data && data.goldPrompt) {
                console.log("Prompt de ouro carregado com sucesso!");
                await savePromptForGleice(userEmail, data.goldPrompt);
                return data.goldPrompt;
            } else {
                console.warn("O documento existe, mas n√£o cont√©m o campo goldPrompt.");
                return null;
            }
        } else {
            console.error("Documento system_config n√£o encontrado em config.");
            return null;
        }
    } catch (error) {
        console.error("Erro ao obter o prompt de ouro:", error);
        return null;
    }
}

// --- Fun√ß√£o: salva o uso do Prompt de Ouro no log ---
async function savePromptForGleice(userEmail, promptText) {
    try {
        await firebase.firestore().collection("logs").add({
            email: userEmail,
            prompt: promptText,
            timestamp: new Date(),
        });
        console.log("Uso do prompt de ouro salvo com sucesso no log.");
    } catch (error) {
        console.error("Erro ao salvar o log de uso do prompt:", error);
    }
}

// --- Fun√ß√£o: trata pagamento e redireciona para o painel VIP ---
async function handlePaymentAndRedirect(userEmail) {
    try {
        const goldPrompt = await getGoldPrompt(userEmail);

        if (goldPrompt) {
            // Redireciona para o painel VIP ap√≥s validar o acesso
            window.location.href = "/admin.html"; // üîÅ 
        } else {
            alert("Voc√™ n√£o tem acesso VIP ou ocorreu um erro ao carregar o prompt especial.");
        }
    } catch (error) {
        console.error("Erro no redirecionamento VIP:", error);
    }
}
